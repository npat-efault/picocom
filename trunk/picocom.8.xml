<?xml version="1.0" standalone='no'?>
<!DOCTYPE manpage SYSTEM "xmltoman.dtd">
 
<manpage 
  name="picocom" 
  section="8" 
  desc="minimal dumb-terminal emulation program">
  
  <synopsis>
    <cmd>picocom [ <arg>options</arg> ] <arg>device</arg></cmd>
  </synopsis>
  
  <description>

    <p>
      As its name suggests, <b>picocom</b> is a minimal
      dumb-terminal emulation program. It is, in principle, very much
      like <manref name="minicom" section="1"/>, only it's "pico"
      instead of "mini"! It was designed to serve as a simple, manual,
      modem configuration, testing, and debugging tool. It has also
      served (quite well) as a low-tech "terminal-window" to allow
      operator intervention in PPP connection scripts (something like
      the ms-windows "open terminal window before / after dialing"
      feature). It could also prove useful in many other similar
      tasks.
    </p>

    <p>
      When <b>picocom</b> starts it opens the terminal (serial
      device) given as its non-option argument. Unless the
      <arg>--noinit</arg> option is given, it configures the device to
      the settings specified by the option-arguments (or to some
      default settings), and sets it to "raw" mode. If
      <arg>--noinit</arg> is given, the initialization and
      configuration is skipped; the device is just opened. Following
      this, <b>picocom</b> sets the standard-input and
      standard-output to raw mode. Having done so, it goes in a loop
      where it listens for input from stdin, or from the serial
      port. Input from the serial port is copied to the standard
      output while input from the standard input is copied to the
      serial port. <b>picocom</b> also scans its input stream for
      a user-specified control character, called the "escape
      character" (being by default "C-a"). If the escape character is
      seen, then instead of sending it to the serial-device, the
      program enters "command mode" and waits for the next character
      (which is called the "function character"). Depending on the
      value of the function character, <b>picocom</b> performs one
      of the operations described in the "Commands" section below.
    </p>
  </description>
  
  <section name="COMMANDS">

    <p>
      Commands are given to <b>picocom</b> by first keying the "espace
      character" which by default is "C-a" (see "Options" below on how
      to change it), and then keying one for the function (command)
      characters shown here.
    </p>
    
    <p>
      [escape character]: Send the escape character to the serial port
      and return to "transparent" mode. This means that if the escape
      character ("C-a", by default) is typed twice, the program sends
      the escape character to the serial port, and remains in
      transparent mode. This is a new behavior implemented in
      v1.4. Previously picocom used to ignore the escape-character
      when it was entered as a function character.
    </p>

    <p>
      [C-x]: Exit the program: if the <arg>--noreset</arg> option was
      not given then the serial port is reset to its original settings
      before exiting; if it was given the serial port is not reset.
    </p>

    <p>
      [C-q]: Quit the program *without* reseting the serial port,
      regardless of the <arg>--noreset</arg> option.
    </p>
	
    <p>
      [C-p]: Pulse the DTR line. Lower it for 1 sec, and then raise it
      again.
    </p>

    <p>
      [C-t]: Toggle the DTR line. If DTR is up, then lower it. If it
      is down, then raise it.
    </p>

    <p>
      [C-backslash]: Generate a break sequence on the serial line. A
      break sequence is usually generated by marking (driving to
      logical one) the serial Tx line for an amount of time
      coresponding to several character durations.
    </p>

    <p>
      [C-u]: Baud up. Increase the baud-rate. The list of baud-rates
      stepped-through by this command is: 50, 75, 110, 134, 150, 200,
      300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600,
      115200. If HIGH_BAUD support is compiled in, then the following
      baud-rates are also added to the list: 230400, 460800, 500000,
      576000, 921600, 1000000, 1152000, 1500000, 2000000, 2500000,
      3000000, 3500000, 4000000. Depending on you system, any of the
      higher baud rates may be missing.
    </p>
    
    <p>
      [C-d]: Baud down. Decrease the baud-rate. The list of baud-rates
      stepped-through by this command is the same as for the "baud-up"
      command.
    </p>

    <p>
      [C-f]: Cycle through flow-control settings (RTS/CTS, XON/XOFF,
      none).
    </p>

    <p>
      [C-y]: Cycle through parity settings (even, odd, none).
    </p>

    <p>
      [C-b]: Cycle through databits-number settings (5, 6, 7, 8).
    </p>

    <p>
      [C-c]: Toggle local-echo mode.
    </p>

    <p>
      [C-v]: Show program options (like baud rate, data bits,
      etc). Only the options that can be modified online (through
      commands) are shown, not those that can only be set at the
      command-line.
    </p>

    <p>
      [C-s]: Send (upload) a file (see "Sending and Receiving Files"
      below)
    </p>
      
    <p>
      [C-r]: Receive (download) a file (see "Sending and Receiving
      Files" below)
    </p>

    <p>
      After performing one of the above operations the program leaves
      the command mode and enters transparent mode. Example: To
      increase the baud-rate by two steps, you have to type:
    </p>
    <p>
      C-a, C-u, C-a, C-u
    </p>
    <p>
      assuming of-course that "C-a" is the escape character.
    </p>
  </section>

  <section name = "SENDING AND RECEIVING FILES">
    <p>
      <b>picocom</b> can send and receive files over the serial port
      using external programs that implement the respective
      protocols. In Linux typical programs for this purpose are:
    </p>

     <p><manref name="rx" section="1"/> 
     - receive using the X-MODEM protocol</p>
     <p><manref name="rb" section="1"/> 
     - receive using the Y-MODEM protocol</p>
     <p><manref name="rz" section="1"/> 
     - receive using the Z-MODEM protocol</p>
     <p><manref name="sx" section="1"/> 
     - send using the X-MODEM protocol</p>
     <p><manref name="sb" section="1"/> 
     - send using the Y-MODEM protocol</p>
     <p><manref name="sz" section="1"/> 
     - send using the Z-MODEM protocol</p>
     <p><manref name="ascii-xfr" section="1"/> 
     - receive or transmit ASCII files</p>
    
    <p>
      The name of, and the command-line options to, the program to be
      used for transmitting files are given by the
      <arg>--send-cmd</arg> option. Similarly the program to receive
      files, and its argumets, are given by the
      <arg>--receive-cmd</arg> option. For example, in order to start
      a <b>picocom</b> session that uses "sz" to transmit files, and
      "rz" to receive, you have to say something like this:
    </p>

    <p>
      picocom --send-cmd "sz -vv" --receive-cmd "rz -vv"
    </p>

    <p>
      During the picocom session, if you key the "send" or "receive"
      commands (e.g. by pressing C-a, C-s, or C-a, C-r) you will be
      prompted for a filename. At this prompt you can enter one or
      more file-names, and any additional arguments to the
      transmission or reception program. Command-line editing and
      pathname completion are available at this prompt, if you have
      compiled picocom with support for the linenoise
      library. Pressing 'C-c' at this prompt will cancel the file
      transfer command and return to normal <b>picocom</b>
      operation. After entering a filename (and / or additional
      transmission or reception program arguments) and assuming you
      have not canceled the operation by pressing C-c, picocom will
      start the the external program as specified by the
      <arg>--send-cmd</arg>, or <arg>--receive-cmd</arg> option, and
      with any filenames and additional arguments you may have
      supplied. The standard input and output of the external program
      will be connected to the serial port. The standard error of the
      external program will be connected to the terminal which---while
      the program is running---will revert to canonical mode. Pressing
      'C-c' while the external program is running will prematurely
      terminate it, and return control to <b>picocom</b>. Pressing
      'C-c' at any other time, has no special effect; the character is
      normally passed to the serial port.
    </p>
      
  </section>

  <section name = "INPUT, OUTPUT, AND ECHO MAPPING">
    <p>
      Using the <arg>--imap</arg>, <arg>--omap</arg>, and
      <arg>--emap</arg> options you can make <b>picocom</b> map
      (tranlate, replace) certain special characters after being read
      from the serial port (with <arg>--imap</arg>), before being
      written to the serial port (with <arg>--omap</arg>), and before
      being locally echoed to the terminal (standard output) if local
      echo is enabled (with <arg>--emap</arg>). These mapping options
      take, each, a single argument which is a comma-separated list of
      one or more of the following identifiers: "crlf" (map CR to LF),
      "crcrlf" (map CR to CR + LF), "igncr" (ignore CR), "lfcr" (map
      LF to CR), "lfcrlf" (map LF to CR + LF), "ignlf" (ignore LF),
      "bsdel" (map BS --> DEL), "delbs" (map DEL --> BS)
    </p>

    <p>
      For example the command:
    </p>
    <p>
      picocom --omap crlf,delbs --imap inglf,bsdel --emap crcrlf ...
    </p>
    <p>
      will: Replace every CR (carriage return, 0x0d) caracter with LF
      (line feed, 0x0a) and every DEL (delete, 0x7f) character with BS
      (backspace, 0x08) before writing it to the serial port. Ignore
      (not write to the terminal) every LF character read from the
      serial port and replace every BS character read from the serial
      port with DEL. Replace every CR character with CR and LF when
      echoing to the terminal (if local-echo is enabled).
    </p>
  </section>
  
  <options>
    <p> 
      <b>picocom</b> accepts the following command-line options
    </p>
    
    <option>
      <opt><p>--baud | -b</p></opt>
      <optdesc>
	<p>
	  Defines the baud-rate to set the serial-port (terminal) to.
	</p>
      </optdesc>
    </option>

    <option>
      <opt><p>--flow | -f</p></opt>
      <optdesc>
	<p>
	  Defines the flow-control mode to set the serial-port
	  to. Must be one of: 'x' for xon/xoff (software) mode, 'h'
	  for hardware flow control (RTS/CTS), 'n' for no flow
	  control. (Default: 'n')
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--parity | -p</p></opt>
      <optdesc>
	<p>
	  Defines the parity mode to set the serial-port to.  Must be
	  one of: 'o' for odd parity mode, 'e' for even parity mode,
	  'n' for no parity mode. (Default: 'n')
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--databits | -d</p></opt>
      <optdesc>
	<p>
	  Defines the number of data bits in every character. Must be
	  one of: 5, 6, 7, 8. (Default: 8)
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--esacpe | -e</p></opt>
      <optdesc>
	<p>
	  Defines the character that will make picocom enter
	  command-mode (see description above). If 'x' is given, then
	  C-x will make picocom enter command mode. (Default: 'a')
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--echo | -c</p></opt>
      <optdesc>
	<p>
	  Enable local echo. Every character being read from the
	  terminal (standard input) is echoed to the terminal
	  (standard output) subject to the echo-mapping configuration
	  (see <arg>--emap</arg> option. (Default: Disabled)
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--noinit | -i</p></opt>
      <optdesc>
	<p>
	  If given, <b>picocom</b> will not initialize, reset, or
	  otherwise meddle with the serial port at start-up. It will
	  just open it. This is useful, for example, for connecting
	  <b>picocom</b> to already-connected modems, or already
	  configured ports without terminating the connection, or
	  altering the settings. If required serial port parameters
	  can then be adjusted at run-time by commands.
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--noreset | -r</p></opt>
      <optdesc>
	<p>
	  If given, <b>picocom</b> will not *reset* the serial port
	  when exiting. It will just close the filedes and do nothing
	  more. This is useful, for example, for leaving modems
	  connected when exiting <b>picocom</b>. Regardless whether
	  the <arg>--noreset</arg> option is given the user can exit
	  <b>picocom</b> using the "Quit" command (instead of "Exit"),
	  which never resets the serial port. If <arg>--noreset</arg>
	  is given then "Quit" and "Exit" behave essentially the same.
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--nolock | -l</p></opt>
      <optdesc>
	<p>
	  If given, <b>picocom</b> will *not* attempt to lock the
	  serial port before opening it. Normally picocom attempts to
	  get a UUCP-style lock-file (e.g. "/var/lock/LCK..ttyS0")
	  before opening the port. Failing to do so, results in the
	  program exiting after emitting an error-message. It is
	  possible that your picocom binary is compiled without this
	  option.
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--send-cmd | -s</p></opt>
      <optdesc>
	<p>
	  Specifies the external program (and any arguments to it)
	  that will be used for transmitting files. (Default: "sz
	  -vv")
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--receive-cmd | -v</p></opt>
      <optdesc>
	<p> 
	  Specifies the external program (and any arguments to it)
	  that will be used for receiving files. (Default: "rz -vv")
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--imap</p></opt>
      <optdesc>
	<p>
	  Specifies the input character map (i.e. special characters
	  to be replaced when read from the serial port). Example:
	  "--imap crlf,delbs". (Defaul: Empty)
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--omap</p></opt>
      <optdesc>
	<p>
	  Specifies the output character map (i.e. special characters
	  to be replaced before being written to serial
	  port). Example: "--omap crcrlf,bsdel". (Defaul: Empty)
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--emap</p></opt>
      <optdesc>
	<p>
	  Specifies the local-echo character map (i.e. special
	  characters to be replaced before being echoed-back to the
	  terminal, if local-echo is enabled). Example: "--emap
	  crcrlf,bsdel". (Defaul: delbs,crcrlf)
	</p>
      </optdesc>
    </option>
    
    <option>
      <opt><p>--help | -h</p></opt>
      <optdesc>
	<p>
	  Print a short help message describing the command-line
	  options.
	</p>
      </optdesc>
    </option>
  </options>
  
  
  <section name="AUTHOR">
    <p>picocom was written by Nick Patavalis (npat@efault.net)</p>
  </section>

  <section name="AVAILABILITY">
    <p>The latest version of "picocom" can be downloaded from: <url
	href="http://code.google.com/p/picocom/" />
    </p>
  </section>

</manpage>
